"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2724],{1616:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"migration/xunit","title":"Migrating from xUnit.net","description":"Using TUnit\'s Code Fixers","source":"@site/docs/migration/xunit.md","sourceDirName":"migration","slug":"/migration/xunit","permalink":"/TUnit/docs/migration/xunit","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Migration","permalink":"/TUnit/docs/category/migration"},"next":{"title":"Examples","permalink":"/TUnit/docs/category/examples"}}');var s=t(4848),o=t(8453);const r={sidebar_position:1},a="Migrating from xUnit.net",d={},c=[{value:"Using TUnit&#39;s Code Fixers",id:"using-tunits-code-fixers",level:2},{value:"Steps",id:"steps",level:3},{value:"Remove the automatically added global usings",id:"remove-the-automatically-added-global-usings",level:4},{value:"Run the code fixers via the dotnet CLI",id:"run-the-code-fixers-via-the-dotnet-cli",level:4},{value:"Perform any manual bits that are still necessary",id:"perform-any-manual-bits-that-are-still-necessary",level:4},{value:"Remove the xUnit packages",id:"remove-the-xunit-packages",level:4},{value:"Revert step 1",id:"revert-step-1",level:4},{value:"Done! (Hopefully)",id:"done-hopefully",level:4},{value:"Manually",id:"manually",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"migrating-from-xunitnet",children:"Migrating from xUnit.net"})}),"\n",(0,s.jsx)(n.h2,{id:"using-tunits-code-fixers",children:"Using TUnit's Code Fixers"}),"\n",(0,s.jsx)(n.p,{children:"TUnit has some code fixers to help automate some of the migration for you."}),"\n",(0,s.jsx)(n.p,{children:"Now bear in mind, these won't be perfect, and you'll likely still have to do some bits manually, but it should make life a bit easier."}),"\n",(0,s.jsx)(n.p,{children:"If you think something could be improved, or something seemed to break, raise an issue so we can make this better and work for more people."}),"\n",(0,s.jsx)(n.h3,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(n.h4,{id:"remove-the-automatically-added-global-usings",children:"Remove the automatically added global usings"}),"\n",(0,s.jsx)(n.p,{children:"If you have the TUnit, TUnit.Engine or TUnit.Core package installed, in your csproj add:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    <ItemGroup>\n        <Using Remove="TUnit.Core.HookType" Static="True" />\n        <Using Remove="TUnit.Core" />\n    </ItemGroup>\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you have the TUnit or TUnit.Assertions package installed, in your csproj add:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    <ItemGroup>\n        <Using Remove="TUnit.Assertions" />\n        <Using Remove="TUnit.Assertions.Extensions" />\n    </ItemGroup>\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is temporary - Just to make sure no types clash, and so the code fixers can distinguish between xUnit and TUnit types with similar names."}),"\n",(0,s.jsx)(n.h4,{id:"run-the-code-fixers-via-the-dotnet-cli",children:"Run the code fixers via the dotnet CLI"}),"\n",(0,s.jsx)(n.p,{children:"Running them in a specific order is recommended.\nSo try the following:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"dotnet format analyzers --severity info --diagnostics TUnit0052"}),"\n",(0,s.jsx)(n.code,{children:"dotnet format analyzers --severity info --diagnostics TUnit0053"}),"\n",(0,s.jsx)(n.code,{children:"dotnet format analyzers --severity info --diagnostics TUnitAssertions0009"}),"\n",(0,s.jsx)(n.code,{children:"dotnet format analyzers --severity info --diagnostics TUnitAssertions0002"}),"\n",(0,s.jsx)(n.code,{children:"dotnet format analyzers --severity info --diagnostics TUnit0054"})]}),"\n",(0,s.jsxs)(n.p,{children:['The diagnostics that have "Assertions" in them are if you\'re switching to TUnit assertions.\nThe last one attempts to remove all ',(0,s.jsx)(n.code,{children:"using Xunit;"})," directives in your code."]}),"\n",(0,s.jsx)(n.h4,{id:"perform-any-manual-bits-that-are-still-necessary",children:"Perform any manual bits that are still necessary"}),"\n",(0,s.jsx)(n.p,{children:"This bit's on you! You'll have to work out what still needs doing.\nRaise an issue if you think it could be automated."}),"\n",(0,s.jsx)(n.h4,{id:"remove-the-xunit-packages",children:"Remove the xUnit packages"}),"\n",(0,s.jsx)(n.p,{children:"Simply uninstall them once you've migrated"}),"\n",(0,s.jsx)(n.h4,{id:"revert-step-1",children:"Revert step 1"}),"\n",(0,s.jsxs)(n.p,{children:["Undo step 1, and you won't have to have ",(0,s.jsx)(n.code,{children:"using TUnit.Core"})," or ",(0,s.jsx)(n.code,{children:"using TUnit.Assertions"})," in every file."]}),"\n",(0,s.jsx)(n.h4,{id:"done-hopefully",children:"Done! (Hopefully)"}),"\n",(0,s.jsx)(n.h2,{id:"manually",children:"Manually"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"[Fact]"})," becomes ",(0,s.jsx)(n.code,{children:"[Test]"}),"\n",(0,s.jsx)(n.code,{children:"[Theory]"})," becomes ",(0,s.jsx)(n.code,{children:"[Test]"}),"\n",(0,s.jsx)(n.code,{children:"[Trait]"})," becomes ",(0,s.jsx)(n.code,{children:"[Property]"}),"\n",(0,s.jsx)(n.code,{children:"[InlineData]"})," becomes ",(0,s.jsx)(n.code,{children:"[Arguments]"}),"\n",(0,s.jsx)(n.code,{children:"[MemberData]"})," becomes ",(0,s.jsx)(n.code,{children:"[MethodDataSource]"}),"\n",(0,s.jsx)(n.code,{children:"[ClassData]"})," becomes ",(0,s.jsx)(n.code,{children:"[MethodDataSource]"})," and point to the GetEnumerator method. Objects will need to be converted from ",(0,s.jsx)(n.code,{children:"object"})," to their actual expected types\n",(0,s.jsx)(n.code,{children:"[Collection]"})," becomes ",(0,s.jsx)(n.code,{children:"[ClassDataSource<>(Shared = SharedType.Keyed/PerTestSession)]"}),"\n",(0,s.jsx)(n.code,{children:"[AssemblyFixture]"})," becomes ",(0,s.jsx)(n.code,{children:"[ClassDataSource<>(Shared = SharedType.PerAssembly)]"})]}),"\n",(0,s.jsx)(n.p,{children:"Interfaces:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"IClassFixture<>"})," becomes an attribute ",(0,s.jsx)(n.code,{children:"[ClassDataSource<>(Shared = SharedType.PerClass)]"}),"\n",(0,s.jsx)(n.code,{children:"IAsyncLifetime"})," on a test class becomes a method attributed with ",(0,s.jsx)(n.code,{children:"[Before(Test)]"}),"\n",(0,s.jsx)(n.code,{children:"IAsyncLifetime"})," on injected data becomes ",(0,s.jsx)(n.code,{children:"IAsyncInitializer"}),"\n",(0,s.jsx)(n.code,{children:"I(Async)Disposable"})," on a test class can remain, or be converted to a method attributed with ",(0,s.jsx)(n.code,{children:"[After(Test)]"})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);