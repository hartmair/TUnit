#nullable enable
abstract TUnit.Assertions.AssertConditions.BaseAssertCondition.GetExpectation() -> string!
abstract TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
abstract TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>.ConvertValue(TFromType value) -> System.Threading.Tasks.ValueTask<(TUnit.Assertions.AssertConditions.AssertionResult!, TToType?)>
abstract TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, TExpected? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
abstract TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.GetFailureMessage(TActual? actualValue) -> string!
abstract TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.Passes(TActual? actualValue) -> TUnit.Assertions.AssertConditions.AssertionResult!
abstract TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TActual?>
abstract TUnit.Assertions.Helpers.Formatter.CanHandle(object? value) -> bool
abstract TUnit.Assertions.Helpers.Formatter.FormatValue(object? value) -> string!
override TUnit.Assertions.AssertConditions.Chronology.DateTimeEqualsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Chronology.DateTimeEqualsExpectedValueAssertCondition.GetResult(System.DateTime actualValue, System.DateTime expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Chronology.DateTimeOffsetEqualsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Chronology.DateTimeOffsetEqualsExpectedValueAssertCondition.GetResult(System.DateTimeOffset actualValue, System.DateTimeOffset expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Chronology.TimeSpanEqualsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Chronology.TimeSpanEqualsExpectedValueAssertCondition.GetResult(System.TimeSpan actualValue, System.TimeSpan expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.ClassMember.PropertyEqualsExpectedValueAssertCondition<TRootObjectType, TPropertyType>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.ClassMember.PropertyEqualsExpectedValueAssertCondition<TRootObjectType, TPropertyType>.GetResult(TRootObjectType? actualValue, TPropertyType? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableAllExpectedFuncAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableAllExpectedFuncAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedFuncAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedFuncAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, TInner? inner) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableCountEqualToExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableCountEqualToExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, int count) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableCountNotEqualToExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableCountNotEqualToExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, int count) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableDistinctItemsExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableDistinctItemsExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableEquivalentToExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableEquivalentToExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, System.Collections.Generic.IEnumerable<TInner>? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedFuncAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedFuncAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, TInner? inner) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableNotEquivalentToExpectedValueAssertCondition<TActual, TInner>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableNotEquivalentToExpectedValueAssertCondition<TActual, TInner>.GetResult(TActual? actualValue, System.Collections.Generic.IEnumerable<TInner>? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Collections.EnumerableOrderedByAssertCondition<TActual, TInner, TComparisonItem>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Collections.EnumerableOrderedByAssertCondition<TActual, TInner, TComparisonItem>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Comparable.BetweenAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Comparable.BetweenAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Comparable.NotBetweenAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Comparable.NotBetweenAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>.GetResult(TFromType? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual, TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual, TException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.EnumerableSatisfiesAssertCondition<TActual, TInner, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.EnumerableSatisfiesAssertCondition<TActual, TInner, TExpected>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageContainingExpectedValueAssertCondition<TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageContainingExpectedValueAssertCondition<TException>.GetResult(TException? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEndingWithExpectedValueAssertCondition<TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEndingWithExpectedValueAssertCondition<TException>.GetResult(TException? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEqualsExpectedValueAssertCondition<TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEqualsExpectedValueAssertCondition<TException>.GetResult(TException? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageMatchingExpectedAssertCondition<TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageMatchingExpectedAssertCondition<TException>.GetResult(TException? actualValue, TUnit.Assertions.AssertConditions.StringMatcher? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageStartingWithExpectedValueAssertCondition<TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageStartingWithExpectedValueAssertCondition<TException>.GetResult(TException? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.FuncValueAssertCondition<TActual, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.FuncValueAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, TExpected? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.NotNullExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.NotNullExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.NullExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.NullExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.SatisfiesAssertCondition<TActual, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.SatisfiesAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition.GetResult(string? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.String.StringNotContainsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.String.StringNotContainsExpectedValueAssertCondition.GetResult(string? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.String.StringNotEqualsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.String.StringNotEqualsExpectedValueAssertCondition.GetResult(string? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.StringMatcher.RegexMatch.ToString() -> string!
override TUnit.Assertions.AssertConditions.StringMatcher.WildcardMatch.ToString() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsAnyExceptionAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsAnyExceptionAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Throws.ThrowsExactTypeOfDelegateAssertCondition<TActual, TExpectedException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsExactTypeOfDelegateAssertCondition<TActual, TExpectedException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Throws.ThrowsNothingAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsNothingAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Throws.ThrowsOfTypeAssertCondition<TActual, TExpectedException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsOfTypeAssertCondition<TActual, TExpectedException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageAssertCondition<TActual, TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageAssertCondition<TActual, TException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageMatchingAssertCondition<TActual, TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageMatchingAssertCondition<TActual, TException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.Throws.ThrowsWithParamNameAssertCondition<TActual, TException>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.Throws.ThrowsWithParamNameAssertCondition<TActual, TException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroup<TActual, TAssertionBuilder>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TActual?>
override TUnit.Assertions.AssertionBuilders.Groups.OrAssertionException.Message.get -> string!
override TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroup<TActual, TAssertionBuilder>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TActual?>
override TUnit.Assertions.Assertions.Delegates.CompleteWithinAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Delegates.CompleteWithinAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Delegates.CompleteWithinAssertCondition<TActual>.WaitFor.get -> System.TimeSpan?
override TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveFlagAssertCondition<TEnum>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveFlagAssertCondition<TEnum>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameNameAsCondition<TEnum, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameNameAsCondition<TEnum, TExpected>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameValueAsCondition<TEnum, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameValueAsCondition<TEnum, TExpected>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumHasFlagAssertCondition<TEnum>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumHasFlagAssertCondition<TEnum>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameNameAsCondition<TEnum, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameNameAsCondition<TEnum, TExpected>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameValueAsCondition<TEnum, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameValueAsCondition<TEnum, TExpected>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumIsDefinedAssertCondition<TEnum>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumIsDefinedAssertCondition<TEnum>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Enums.Conditions.EnumIsNotDefinedAssertCondition<TEnum>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Enums.Conditions.EnumIsNotDefinedAssertCondition<TEnum>.GetResult(TEnum? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.AssignableFromExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.AssignableFromExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.AssignableToExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.AssignableToExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.DefaultExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.DefaultExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.EqualsExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.EqualsExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, TActual? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, TExpected? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NoOpAssertionCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NoOpAssertionCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableFromExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableFromExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableToExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableToExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NotDefaultExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NotDefaultExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, TActual? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NotEqualsExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NotEqualsExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, TActual? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NotSameReferenceExpectedValueAssertCondition<TActual, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NotSameReferenceExpectedValueAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, TExpected? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.NotTypeOfExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.NotTypeOfExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.SameReferenceExpectedValueAssertCondition<TActual, TExpected>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.SameReferenceExpectedValueAssertCondition<TActual, TExpected>.GetResult(TActual? actualValue, TExpected? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Generics.Conditions.TypeOfExpectedValueAssertCondition<TActual>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Generics.Conditions.TypeOfExpectedValueAssertCondition<TActual>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Strings.Conditions.StringContainsExpectedValueAssertCondition.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Strings.Conditions.StringContainsExpectedValueAssertCondition.GetResult(string? actualValue, string? expectedValue) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Throws.ThrowsWithinAssertCondition<TActual, TExpectedException>.GetExpectation() -> string!
override TUnit.Assertions.Assertions.Throws.ThrowsWithinAssertCondition<TActual, TExpectedException>.GetResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
override TUnit.Assertions.Assertions.Throws.ThrowsWithinAssertCondition<TActual, TExpectedException>.WaitFor.get -> System.TimeSpan?
override TUnit.Assertions.Equality.CollectionEquivalentToEqualityComparer<T>.EnumerableIndex.get -> int?
override TUnit.Assertions.Equality.CollectionEquivalentToEqualityComparer<T>.EnumerableIndex.set -> void
override TUnit.Assertions.Equality.CollectionEquivalentToEqualityComparer<T>.Equals(T? x, T? y) -> bool
override TUnit.Assertions.Helpers.StringDifference.ToString() -> string!
readonly TUnit.Assertions.AssertionBuilders.AssertionBuilder.Results -> System.Collections.Generic.List<TUnit.Assertions.AssertConditions.AssertionResult!>!
static TUnit.Assertions.Assert.Fail(string! reason) -> void
static TUnit.Assertions.Assert.Multiple() -> System.IDisposable!
static TUnit.Assertions.Assert.That(System.Action! value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.DelegateAssertionBuilder!
static TUnit.Assertions.Assert.That(System.Collections.IEnumerable! enumerable, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<System.Collections.Generic.IEnumerable<object!>!>!
static TUnit.Assertions.Assert.That(System.Func<System.Threading.Tasks.Task!>! value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!
static TUnit.Assertions.Assert.That(System.Threading.Tasks.Task! value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!
static TUnit.Assertions.Assert.That(System.Threading.Tasks.ValueTask value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!
static TUnit.Assertions.Assert.That<TActual>(System.Func<System.Threading.Tasks.Task<TActual>!>! value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!
static TUnit.Assertions.Assert.That<TActual>(System.Func<TActual>! value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.ValueDelegateAssertionBuilder<TActual>!
static TUnit.Assertions.Assert.That<TActual>(System.Threading.Tasks.Task<TActual>! value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!
static TUnit.Assertions.Assert.That<TActual>(System.Threading.Tasks.ValueTask<TActual> value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!
static TUnit.Assertions.Assert.That<TActual>(TActual value, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<TActual>!
static TUnit.Assertions.Assert.Throws(System.Action! delegate, string? doNotPopulateThisValue = null) -> System.Exception!
static TUnit.Assertions.Assert.Throws(System.Type! type, System.Action! delegate, string? doNotPopulateThisValue = null) -> System.Exception!
static TUnit.Assertions.Assert.Throws<TException>(System.Action! delegate, string? doNotPopulateThisValue = null) -> TException!
static TUnit.Assertions.Assert.ThrowsAsync(System.Func<System.Threading.Tasks.Task!>! delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<System.Exception!>!
static TUnit.Assertions.Assert.ThrowsAsync(System.Threading.Tasks.Task! delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<System.Exception!>!
static TUnit.Assertions.Assert.ThrowsAsync(System.Threading.Tasks.ValueTask delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<System.Exception!>!
static TUnit.Assertions.Assert.ThrowsAsync(System.Type! type, System.Func<System.Threading.Tasks.Task!>! delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<System.Exception!>!
static TUnit.Assertions.Assert.ThrowsAsync(System.Type! type, System.Threading.Tasks.Task! delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<System.Exception!>!
static TUnit.Assertions.Assert.ThrowsAsync(System.Type! type, System.Threading.Tasks.ValueTask delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<System.Exception!>!
static TUnit.Assertions.Assert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task!>! delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<TException!>!
static TUnit.Assertions.Assert.ThrowsAsync<TException>(System.Threading.Tasks.Task! delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<TException!>!
static TUnit.Assertions.Assert.ThrowsAsync<TException>(System.Threading.Tasks.ValueTask delegate, string? doNotPopulateThisValue = null) -> System.Threading.Tasks.Task<TException!>!
static TUnit.Assertions.AssertConditions.AssertionResult.Fail(string! message) -> TUnit.Assertions.AssertConditions.AssertionResult!
static TUnit.Assertions.AssertConditions.AssertionResult.FailIf(bool isFailed, string! message) -> TUnit.Assertions.AssertConditions.AssertionResult!
static TUnit.Assertions.AssertConditions.AssertionResult.FailIf(bool isFailed, TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler stringHandler) -> TUnit.Assertions.AssertConditions.AssertionResult!
static TUnit.Assertions.AssertConditions.AssertionResult.implicit operator System.Threading.Tasks.Task<TUnit.Assertions.AssertConditions.AssertionResult!>!(TUnit.Assertions.AssertConditions.AssertionResult! result) -> System.Threading.Tasks.Task<TUnit.Assertions.AssertConditions.AssertionResult!>!
static TUnit.Assertions.AssertConditions.AssertionResult.implicit operator System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>(TUnit.Assertions.AssertConditions.AssertionResult! result) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
static TUnit.Assertions.AssertConditions.AssertionResult.Passed.get -> TUnit.Assertions.AssertConditions.AssertionResult!
static TUnit.Assertions.AssertConditions.Operators.DelegateAnd<TActual>.Create(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> TUnit.Assertions.AssertConditions.Operators.DelegateAnd<TActual>!
static TUnit.Assertions.AssertConditions.Operators.DelegateOr<TActual>.Create(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> TUnit.Assertions.AssertConditions.Operators.DelegateOr<TActual>!
static TUnit.Assertions.AssertConditions.Operators.ValueAnd<TActual>.Create(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> TUnit.Assertions.AssertConditions.Operators.ValueAnd<TActual>!
static TUnit.Assertions.AssertConditions.Operators.ValueDelegateAnd<TActual>.Create(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> TUnit.Assertions.AssertConditions.Operators.ValueDelegateAnd<TActual>!
static TUnit.Assertions.AssertConditions.Operators.ValueDelegateOr<TActual>.Create(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> TUnit.Assertions.AssertConditions.Operators.ValueDelegateOr<TActual>!
static TUnit.Assertions.AssertConditions.StringMatcher.AsRegex(string! pattern) -> TUnit.Assertions.AssertConditions.StringMatcher.RegexMatch!
static TUnit.Assertions.AssertConditions.StringMatcher.AsWildcard(string! pattern) -> TUnit.Assertions.AssertConditions.StringMatcher.WildcardMatch!
static TUnit.Assertions.AssertConditions.StringMatcher.implicit operator TUnit.Assertions.AssertConditions.StringMatcher!(string! pattern) -> TUnit.Assertions.AssertConditions.StringMatcher!
static TUnit.Assertions.AssertConditions.StringMatcher.implicit operator TUnit.Assertions.AssertConditions.StringMatcher!(System.Text.RegularExpressions.Regex! pattern) -> TUnit.Assertions.AssertConditions.StringMatcher!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.Throws<TException>(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource) -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<object?, TException!>!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.ThrowsExactly<TException>(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource) -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<object?, TException!>!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.ThrowsException(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource) -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<object?, System.Exception!>!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.ThrowsNothing(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource) -> TUnit.Assertions.AssertionBuilders.CastableAssertionBuilder<object?, object?>!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.ThrowsNothing<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueDelegateSource<TActual>! delegateSource) -> TUnit.Assertions.AssertionBuilders.CastableAssertionBuilder<TActual, TActual>!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.ThrowsWithin(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource, System.TimeSpan timeSpan, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.ThrowsWithin<TException>(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource, System.TimeSpan timeSpan, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder!
static TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions.WithParameterName<TActual, TException>(this TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException!>! throwsException, string! expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.And<TActual, TAssertionBuilder>(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group1, TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group2) -> TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.Assert<TActual, TAssertionBuilder>(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group) -> TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroupInvoker<TActual, TAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For(System.Action! value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<object?, TUnit.Assertions.AssertionBuilders.DelegateAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For(System.Func<System.Threading.Tasks.Task!>! value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<object?, TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For(System.Threading.Tasks.Task! value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<object?, TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For(System.Threading.Tasks.ValueTask value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<object?, TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For<TActual>(System.Func<System.Threading.Tasks.Task<TActual>!>! value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For<TActual>(System.Func<TActual>! value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.ValueDelegateAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For<TActual>(System.Threading.Tasks.Task<TActual>! value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For<TActual>(System.Threading.Tasks.ValueTask<TActual> value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.For<TActual>(TActual value) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.ForSameValueAs(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<object?, TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<object?, TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.ForSameValueAs(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<object?, TUnit.Assertions.AssertionBuilders.DelegateAssertionBuilder!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<object?, TUnit.Assertions.AssertionBuilders.DelegateAssertionBuilder!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.ForSameValueAs<TActual>(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.ForSameValueAs<TActual>(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<TActual>!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.ForSameValueAs<TActual>(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TUnit.Assertions.AssertionBuilders.ValueDelegateAssertionBuilder<TActual>!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TUnit.Assertions.AssertionBuilders.ValueDelegateAssertionBuilder<TActual>!>!
static TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup.Or<TActual, TAssertionBuilder>(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group1, TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group2) -> TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder!>!
static TUnit.Assertions.AssertionData.implicit operator TUnit.Assertions.AssertionData((object?, System.Exception?, string?, System.DateTimeOffset, System.DateTimeOffset) tuple) -> TUnit.Assertions.AssertionData
static TUnit.Assertions.AssertionDecision.Continue.get -> TUnit.Assertions.AssertionDecision!
static TUnit.Assertions.AssertionDecision.Fail(string! message) -> TUnit.Assertions.AssertionDecision!
static TUnit.Assertions.AssertionDecision.Pass.get -> TUnit.Assertions.AssertionDecision!
static TUnit.Assertions.Assertions.Delegates.DelegateExtensions.CompletesWithin(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource, System.TimeSpan timeSpan, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder!
static TUnit.Assertions.Assertions.Delegates.DelegateExtensions.CompletesWithin<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueDelegateSource<TActual>! delegateSource, System.TimeSpan timeSpan, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.DoesNotHaveFlag<TEnum>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource, TEnum expected, string? doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.DoesNotHaveSameNameAs<TEnum, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource, TExpected expected, string? doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.DoesNotHaveSameValueAs<TEnum, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource, TExpected expected, string? doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.HasFlag<TEnum>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource, TEnum expected, string? doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.HasSameNameAs<TEnum, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource, TExpected expected, string? doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.HasSameValueAs<TEnum, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource, TExpected expected, string? doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.IsDefined<TEnum>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Assertions.Enums.EnumHasExtensions.IsNotDefined<TEnum>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TEnum>! valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TEnum>!
static TUnit.Assertions.Compare.CheckEquivalent<TActual, TExpected>(TActual actual, TExpected expected, TUnit.Assertions.CompareOptions! options, int? index) -> System.Collections.Generic.IEnumerable<TUnit.Assertions.ComparisonFailure!>!
static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotContain<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual>! valueSource, TInner expected, System.Collections.Generic.IEqualityComparer<TInner?>? equalityComparer = null, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotContain<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>!>! valueSource, System.Func<TInner, bool>! matcher, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>!>!
static TUnit.Assertions.Extensions.GenericSatisfiesExtensions.All<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>!>! valueSource) -> TUnit.Assertions.CollectionWrapper<TInner>!
static TUnit.Assertions.Extensions.GenericSatisfiesExtensions.Satisfies<TActual, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual>! valueSource, System.Func<TActual, System.Threading.Tasks.Task<TExpected>?>! asyncMapper, System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TExpected?>!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TExpected?>!>! assert, string! mapperExpression = "", string! assertionBuilderExpression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
static TUnit.Assertions.Extensions.GenericSatisfiesExtensions.Satisfies<TActual, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual>! valueSource, System.Func<TActual, TExpected>! mapper, System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TExpected?>!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TExpected?>!>! assert, string! mapperExpression = "", string! assertionBuilderExpression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
static TUnit.Assertions.Extensions.HasExtensions.HasMember<TRootObject, TPropertyType>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TRootObject>! valueSource, System.Linq.Expressions.Expression<System.Func<TRootObject, TPropertyType>!>! selector, string! expression = "") -> TUnit.Assertions.AssertConditions.ClassMember.Member<TRootObject, TPropertyType>!
static TUnit.Assertions.Extensions.SourceExtensions.RegisterAssertion<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! delegateSource, TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>! assertCondition, string?[]! argumentExpressions, string? caller = null) -> TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder!
static TUnit.Assertions.Extensions.SourceExtensions.RegisterAssertion<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual>! source, TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>! assertCondition, string?[]! argumentExpressions, string? caller = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
static TUnit.Assertions.Extensions.StringExtensions.GetStringOr(this string? value, string! defaultValue) -> string!
static TUnit.Assertions.Extensions.StringExtensions.GetStringOrEmpty(this string? value) -> string!
static TUnit.Assertions.Extensions.StringExtensions.PrependAOrAn(this string! value) -> string!
static TUnit.Assertions.Extensions.StringExtensions.ReplaceNewLines(this string! value) -> string!
static TUnit.Assertions.Extensions.StringExtensions.ShowNewLines(this string! value) -> string!
static TUnit.Assertions.Extensions.StringExtensions.TruncateWithEllipsis(this string! value, int maxLength) -> string!
static TUnit.Assertions.Extensions.TimeSpanExtensions.Days(this int days) -> System.TimeSpan
static TUnit.Assertions.Extensions.TimeSpanExtensions.Hours(this int hours) -> System.TimeSpan
static TUnit.Assertions.Extensions.TimeSpanExtensions.Milliseconds(this int milliseconds) -> System.TimeSpan
static TUnit.Assertions.Extensions.TimeSpanExtensions.Minutes(this int minutes) -> System.TimeSpan
static TUnit.Assertions.Extensions.TimeSpanExtensions.Seconds(this int seconds) -> System.TimeSpan
static TUnit.Assertions.Fail.Test(string! reason) -> void
static TUnit.Assertions.Fail.Unless(bool condition, string! reason) -> void
static TUnit.Assertions.Fail.When(bool condition, string! reason) -> void
static TUnit.Assertions.Helpers.ExpressionHelpers.GetName<T1, T2>(System.Linq.Expressions.Expression<System.Func<T1, T2>!>! exp) -> string!
static TUnit.Assertions.Helpers.Formatter.Format(object? value) -> string!
static TUnit.Assertions.Helpers.TimeSpanFormatter.PrettyPrint(this System.TimeSpan timeSpan) -> string!
TUnit.Assertions.Assert
TUnit.Assertions.AssertConditions.AssertionResult
TUnit.Assertions.AssertConditions.AssertionResult.And(TUnit.Assertions.AssertConditions.AssertionResult! other) -> TUnit.Assertions.AssertConditions.AssertionResult!
TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler
TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler.AppendFormatted<T>(T? t) -> void
TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler.AppendFormatted<T>(T? t, string! format) -> void
TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler.AppendLiteral(string! s) -> void
TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler.InterpolatedStringHandler() -> void
TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler.InterpolatedStringHandler(int literalLength, int formattedCount, bool isFailed, out bool enabled) -> void
TUnit.Assertions.AssertConditions.AssertionResult.IsPassed.get -> bool
TUnit.Assertions.AssertConditions.AssertionResult.Message.get -> string!
TUnit.Assertions.AssertConditions.AssertionResult.OrAsync(System.Func<System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>>! otherResult) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
TUnit.Assertions.AssertConditions.AssertionResult.OrFailIf(bool isFailed, string! message) -> TUnit.Assertions.AssertConditions.AssertionResult!
TUnit.Assertions.AssertConditions.AssertionResult.OrFailIf(bool isFailed, TUnit.Assertions.AssertConditions.AssertionResult.InterpolatedStringHandler stringHandler) -> TUnit.Assertions.AssertConditions.AssertionResult!
TUnit.Assertions.AssertConditions.BaseAssertCondition
TUnit.Assertions.AssertConditions.BaseAssertCondition.BaseAssertCondition() -> void
TUnit.Assertions.AssertConditions.BaseAssertCondition.FailWithMessage(string! message) -> TUnit.Assertions.AssertConditions.AssertionResult!
TUnit.Assertions.AssertConditions.BaseAssertCondition.OverriddenMessage.get -> string?
TUnit.Assertions.AssertConditions.BaseAssertCondition.Subject.get -> string?
TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>
TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>.ActualExpression.get -> string?
TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>.BaseAssertCondition() -> void
TUnit.Assertions.AssertConditions.BaseAssertCondition<TActual>.GetAssertionResult(TActual? actualValue, System.Exception? exception, TUnit.Assertions.AssertionMetadata! assertionMetadata, string? actualExpression = null) -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertConditions.AssertionResult!>
TUnit.Assertions.AssertConditions.ChainType
TUnit.Assertions.AssertConditions.ChainType.And = 1 -> TUnit.Assertions.AssertConditions.ChainType
TUnit.Assertions.AssertConditions.ChainType.None = 0 -> TUnit.Assertions.AssertConditions.ChainType
TUnit.Assertions.AssertConditions.ChainType.Or = 2 -> TUnit.Assertions.AssertConditions.ChainType
TUnit.Assertions.AssertConditions.Chronology.DateTimeEqualsExpectedValueAssertCondition
TUnit.Assertions.AssertConditions.Chronology.DateTimeEqualsExpectedValueAssertCondition.DateTimeEqualsExpectedValueAssertCondition(System.DateTime expected) -> void
TUnit.Assertions.AssertConditions.Chronology.DateTimeEqualsExpectedValueAssertCondition.SetTolerance(System.TimeSpan tolerance) -> void
TUnit.Assertions.AssertConditions.Chronology.DateTimeOffsetEqualsExpectedValueAssertCondition
TUnit.Assertions.AssertConditions.Chronology.DateTimeOffsetEqualsExpectedValueAssertCondition.DateTimeOffsetEqualsExpectedValueAssertCondition(System.DateTimeOffset expected) -> void
TUnit.Assertions.AssertConditions.Chronology.DateTimeOffsetEqualsExpectedValueAssertCondition.SetTolerance(System.TimeSpan tolerance) -> void
TUnit.Assertions.AssertConditions.Chronology.TimeSpanEqualsExpectedValueAssertCondition
TUnit.Assertions.AssertConditions.Chronology.TimeSpanEqualsExpectedValueAssertCondition.SetTolerance(System.TimeSpan tolerance) -> void
TUnit.Assertions.AssertConditions.Chronology.TimeSpanEqualsExpectedValueAssertCondition.TimeSpanEqualsExpectedValueAssertCondition(System.TimeSpan expected) -> void
TUnit.Assertions.AssertConditions.ClassMember.Member<TActualRootType, TPropertyType>
TUnit.Assertions.AssertConditions.ClassMember.Member<TActualRootType, TPropertyType>.EqualTo(TPropertyType expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActualRootType>!
TUnit.Assertions.AssertConditions.ClassMember.Member<TActualRootType, TPropertyType>.Member(TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActualRootType>! valueSource, System.Linq.Expressions.Expression<System.Func<TActualRootType, TPropertyType>!>! selector) -> void
TUnit.Assertions.AssertConditions.ClassMember.Member<TActualRootType, TPropertyType>.NotEqualTo(TPropertyType expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActualRootType>!
TUnit.Assertions.AssertConditions.ClassMember.PropertyEqualsExpectedValueAssertCondition<TRootObjectType, TPropertyType>
TUnit.Assertions.AssertConditions.ClassMember.PropertyEqualsExpectedValueAssertCondition<TRootObjectType, TPropertyType>.PropertyEqualsExpectedValueAssertCondition(System.Linq.Expressions.Expression<System.Func<TRootObjectType, TPropertyType>!>! propertySelector, TPropertyType expected, bool isEqual) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableAllExpectedFuncAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableAllExpectedFuncAssertCondition<TActual, TInner>.EnumerableAllExpectedFuncAssertCondition(System.Func<TInner, bool>! matcher, string? matcherString) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedFuncAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedFuncAssertCondition<TActual, TInner>.EnumerableContainsExpectedFuncAssertCondition(System.Func<TInner, bool>! matcher, string? matcherString) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableContainsExpectedValueAssertCondition<TActual, TInner>.EnumerableContainsExpectedValueAssertCondition(TInner expected, System.Collections.Generic.IEqualityComparer<TInner?>? equalityComparer) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableCountEqualToExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableCountEqualToExpectedValueAssertCondition<TActual, TInner>.EnumerableCountEqualToExpectedValueAssertCondition(int expected) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableCountNotEqualToExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableCountNotEqualToExpectedValueAssertCondition<TActual, TInner>.EnumerableCountNotEqualToExpectedValueAssertCondition(int expected) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableDistinctItemsExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableDistinctItemsExpectedValueAssertCondition<TActual, TInner>.EnumerableDistinctItemsExpectedValueAssertCondition(System.Collections.Generic.IEqualityComparer<TInner?>? equalityComparer) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableEquivalentToExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableEquivalentToExpectedValueAssertCondition<TActual, TInner>.EnumerableEquivalentToExpectedValueAssertCondition(System.Collections.Generic.IEnumerable<TInner>! expected, System.Collections.Generic.IEqualityComparer<TInner?>! equalityComparer, TUnit.Assertions.Enums.CollectionOrdering collectionOrdering) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedFuncAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedFuncAssertCondition<TActual, TInner>.EnumerableNotContainsExpectedFuncAssertCondition(System.Func<TInner, bool>! matcher, string? matcherString) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableNotContainsExpectedValueAssertCondition<TActual, TInner>.EnumerableNotContainsExpectedValueAssertCondition(TInner expected, System.Collections.Generic.IEqualityComparer<TInner?>? equalityComparer) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableNotEquivalentToExpectedValueAssertCondition<TActual, TInner>
TUnit.Assertions.AssertConditions.Collections.EnumerableNotEquivalentToExpectedValueAssertCondition<TActual, TInner>.EnumerableNotEquivalentToExpectedValueAssertCondition(System.Collections.Generic.IEnumerable<TInner>! expected, System.Collections.Generic.IEqualityComparer<TInner?>? equalityComparer) -> void
TUnit.Assertions.AssertConditions.Collections.EnumerableOrderedByAssertCondition<TActual, TInner, TComparisonItem>
TUnit.Assertions.AssertConditions.Collections.EnumerableOrderedByAssertCondition<TActual, TInner, TComparisonItem>.EnumerableOrderedByAssertCondition(System.Collections.Generic.IComparer<TComparisonItem?>! comparer, System.Func<TInner, TComparisonItem>! comparisonItemSelector, TUnit.Assertions.Enums.Order order) -> void
TUnit.Assertions.AssertConditions.Collections.PropertyOrMethodAccessor<TActual>
TUnit.Assertions.AssertConditions.Collections.PropertyOrMethodAccessor<TActual>.PropertyOrMethodAccessor() -> void
TUnit.Assertions.AssertConditions.Comparable.BetweenAssertCondition<TActual>
TUnit.Assertions.AssertConditions.Comparable.BetweenAssertCondition<TActual>.BetweenAssertCondition(TActual minimum, TActual maximum) -> void
TUnit.Assertions.AssertConditions.Comparable.BetweenAssertCondition<TActual>.Exclusive() -> void
TUnit.Assertions.AssertConditions.Comparable.BetweenAssertCondition<TActual>.Inclusive() -> void
TUnit.Assertions.AssertConditions.Comparable.NotBetweenAssertCondition<TActual>
TUnit.Assertions.AssertConditions.Comparable.NotBetweenAssertCondition<TActual>.Exclusive() -> void
TUnit.Assertions.AssertConditions.Comparable.NotBetweenAssertCondition<TActual>.Inclusive() -> void
TUnit.Assertions.AssertConditions.Comparable.NotBetweenAssertCondition<TActual>.NotBetweenAssertCondition(TActual minimum, TActual maximum) -> void
TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>
TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>.ConvertedValue.get -> TToType?
TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>.ConvertToAssertCondition() -> void
TUnit.Assertions.AssertConditions.DelegateAssertCondition
TUnit.Assertions.AssertConditions.DelegateAssertCondition.DelegateAssertCondition() -> void
TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual, TException>
TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual, TException>.DelegateAssertCondition() -> void
TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual, TException>.WithComparer(System.Func<TException?, TUnit.Assertions.AssertionDecision!>! comparer) -> void
TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual>
TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual>.DelegateAssertCondition() -> void
TUnit.Assertions.AssertConditions.EnumerableSatisfiesAssertCondition<TActual, TInner, TExpected>
TUnit.Assertions.AssertConditions.EnumerableSatisfiesAssertCondition<TActual, TInner, TExpected>.EnumerableSatisfiesAssertCondition(System.Func<TInner?, System.Threading.Tasks.Task<TExpected>?>! mapper, System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TExpected?>!, TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder!>! assertionBuilder, string! mapperExpression, string! assertionBuilderExpression) -> void
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageContainingExpectedValueAssertCondition<TException>
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageContainingExpectedValueAssertCondition<TException>.ExceptionMessageContainingExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEndingWithExpectedValueAssertCondition<TException>
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEndingWithExpectedValueAssertCondition<TException>.ExceptionMessageEndingWithExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEqualsExpectedValueAssertCondition<TException>
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageEqualsExpectedValueAssertCondition<TException>.ExceptionMessageEqualsExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageMatchingExpectedAssertCondition<TException>
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageMatchingExpectedAssertCondition<TException>.ExceptionMessageMatchingExpectedAssertCondition(TUnit.Assertions.AssertConditions.StringMatcher! match) -> void
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageStartingWithExpectedValueAssertCondition<TException>
TUnit.Assertions.AssertConditions.Exceptions.ExceptionMessageStartingWithExpectedValueAssertCondition<TException>.ExceptionMessageStartingWithExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.ExpectedExceptionDelegateAssertCondition<TException>
TUnit.Assertions.AssertConditions.ExpectedExceptionDelegateAssertCondition<TException>.ExpectedExceptionDelegateAssertCondition() -> void
TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>
TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>.ExpectedValue.get -> TExpected?
TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>.ExpectedValueAssertCondition(TExpected? expected) -> void
TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>.WithComparer(System.Func<TActual?, TExpected?, TUnit.Assertions.AssertionDecision!>! comparer) -> void
TUnit.Assertions.AssertConditions.ExpectedValueAssertCondition<TActual, TExpected>.WithTransform(System.Func<TActual?, TActual?>! actualTransformation, System.Func<TExpected?, TExpected?>! expectedTransformation) -> void
TUnit.Assertions.AssertConditions.FailureLocation
TUnit.Assertions.AssertConditions.FailureLocation.ActualValue.get -> object?
TUnit.Assertions.AssertConditions.FailureLocation.ExpectedValue.get -> object?
TUnit.Assertions.AssertConditions.FailureLocation.Position.get -> long
TUnit.Assertions.AssertConditions.FuncValueAssertCondition<TActual, TExpected>
TUnit.Assertions.AssertConditions.FuncValueAssertCondition<TActual, TExpected>.FuncValueAssertCondition(TExpected? expected, System.Func<TActual?, TExpected?, TUnit.Assertions.AssertConditions.FuncValueAssertCondition<TActual, TExpected>!, bool>! condition, System.Func<TActual?, System.Exception?, string?, string!>! defaultMessageFactory, string! expectation) -> void
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.ActualExpression.get -> string?
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.AppendExpression(string! expression) -> TUnit.Assertions.AssertConditions.Interfaces.ISource!
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.AssertionDataTask.get -> System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertionData>
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.Assertions.get -> System.Collections.Generic.Stack<TUnit.Assertions.AssertConditions.BaseAssertCondition!>!
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.ConvertedValueSource(TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TFromType>! source, TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>! convertToAssertCondition) -> void
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.ExpressionBuilder.get -> System.Text.StringBuilder!
TUnit.Assertions.AssertConditions.Interfaces.ConvertedValueSource<TFromType, TToType>.WithAssertion(TUnit.Assertions.AssertConditions.BaseAssertCondition! assertCondition) -> TUnit.Assertions.AssertConditions.Interfaces.ISource!
TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource
TUnit.Assertions.AssertConditions.Interfaces.ISource
TUnit.Assertions.AssertConditions.Interfaces.ISource.ActualExpression.get -> string?
TUnit.Assertions.AssertConditions.Interfaces.ISource.AppendExpression(string! expression) -> TUnit.Assertions.AssertConditions.Interfaces.ISource!
TUnit.Assertions.AssertConditions.Interfaces.ISource.WithAssertion(TUnit.Assertions.AssertConditions.BaseAssertCondition! assertCondition) -> TUnit.Assertions.AssertConditions.Interfaces.ISource!
TUnit.Assertions.AssertConditions.Interfaces.IValueDelegateSource<TActual>
TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual>
TUnit.Assertions.AssertConditions.NotNullExpectedValueAssertCondition<TActual>
TUnit.Assertions.AssertConditions.NotNullExpectedValueAssertCondition<TActual>.NotNullExpectedValueAssertCondition() -> void
TUnit.Assertions.AssertConditions.NullExpectedValueAssertCondition<TActual>
TUnit.Assertions.AssertConditions.NullExpectedValueAssertCondition<TActual>.NullExpectedValueAssertCondition() -> void
TUnit.Assertions.AssertConditions.Operators.AssertionType
TUnit.Assertions.AssertConditions.Operators.AssertionType.Delegate = 2 -> TUnit.Assertions.AssertConditions.Operators.AssertionType
TUnit.Assertions.AssertConditions.Operators.AssertionType.Value = 1 -> TUnit.Assertions.AssertConditions.Operators.AssertionType
TUnit.Assertions.AssertConditions.Operators.DelegateAnd<TActual>
TUnit.Assertions.AssertConditions.Operators.DelegateAnd<TActual>.DelegateAnd(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> void
TUnit.Assertions.AssertConditions.Operators.DelegateOr<TActual>
TUnit.Assertions.AssertConditions.Operators.DelegateOr<TActual>.DelegateOr(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> void
TUnit.Assertions.AssertConditions.Operators.ValueAnd<TActual>
TUnit.Assertions.AssertConditions.Operators.ValueAnd<TActual>.ValueAnd(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> void
TUnit.Assertions.AssertConditions.Operators.ValueDelegateAnd<TActual>
TUnit.Assertions.AssertConditions.Operators.ValueDelegateAnd<TActual>.ValueDelegateAnd(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> void
TUnit.Assertions.AssertConditions.Operators.ValueDelegateOr<TActual>
TUnit.Assertions.AssertConditions.Operators.ValueDelegateOr<TActual>.ValueDelegateOr(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> void
TUnit.Assertions.AssertConditions.Operators.ValueOr<TActual>
TUnit.Assertions.AssertConditions.Operators.ValueOr<TActual>.ValueOr(TUnit.Assertions.AssertionBuilders.AssertionBuilder! assertionBuilder) -> void
TUnit.Assertions.AssertConditions.SatisfiesAssertCondition<TActual, TExpected>
TUnit.Assertions.AssertConditions.SatisfiesAssertCondition<TActual, TExpected>.SatisfiesAssertCondition(System.Func<TActual, System.Threading.Tasks.Task<TExpected>?>! mapper, System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TExpected?>!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TExpected?>!>! assertionBuilder, string! mapperExpression, string! assertionBuilderExpression) -> void
TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition
TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition.IgnoringWhitespace() -> TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition!
TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition.StringEqualsExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition.WithNullAndEmptyEquality() -> TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition!
TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition.WithTrimming() -> TUnit.Assertions.AssertConditions.String.StringEqualsExpectedValueAssertCondition!
TUnit.Assertions.AssertConditions.String.StringNotContainsExpectedValueAssertCondition
TUnit.Assertions.AssertConditions.String.StringNotContainsExpectedValueAssertCondition.StringNotContainsExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.String.StringNotEqualsExpectedValueAssertCondition
TUnit.Assertions.AssertConditions.String.StringNotEqualsExpectedValueAssertCondition.StringNotEqualsExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.AssertConditions.StringMatcher
TUnit.Assertions.AssertConditions.StringMatcher.RegexMatch
TUnit.Assertions.AssertConditions.StringMatcher.RegexMatch.IgnoringCase(bool ignoreCase = true) -> TUnit.Assertions.AssertConditions.StringMatcher.RegexMatch!
TUnit.Assertions.AssertConditions.StringMatcher.StringMatcher() -> void
TUnit.Assertions.AssertConditions.StringMatcher.WildcardMatch
TUnit.Assertions.AssertConditions.StringMatcher.WildcardMatch.IgnoringCase(bool ignoreCase = true) -> TUnit.Assertions.AssertConditions.StringMatcher.WildcardMatch!
TUnit.Assertions.AssertConditions.Throws.ThrowsAnyExceptionAssertCondition<TActual>
TUnit.Assertions.AssertConditions.Throws.ThrowsAnyExceptionAssertCondition<TActual>.ThrowsAnyExceptionAssertCondition() -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsExactTypeOfDelegateAssertCondition<TActual, TExpectedException>
TUnit.Assertions.AssertConditions.Throws.ThrowsExactTypeOfDelegateAssertCondition<TActual, TExpectedException>.ThrowsExactTypeOfDelegateAssertCondition() -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.And.get -> TUnit.Assertions.AssertionBuilders.AndConvertedDelegateAssertionBuilder<TException!>!
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TException?>
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.Or.get -> TUnit.Assertions.AssertConditions.Operators.DelegateOr<object?>!
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.ThrowsException(TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder! delegateAssertionBuilder, TUnit.Assertions.AssertConditions.Interfaces.IDelegateSource! source, System.Func<System.Exception?, System.Exception?>! selector) -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.WithInnerException() -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, System.Exception!>!
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.WithMessage(string! expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException!>!
TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException>.WithMessageMatching(TUnit.Assertions.AssertConditions.StringMatcher! match, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertConditions.Throws.ThrowsException<TActual, TException!>!
TUnit.Assertions.AssertConditions.Throws.ThrowsExtensions
TUnit.Assertions.AssertConditions.Throws.ThrowsNothingAssertCondition<TActual>
TUnit.Assertions.AssertConditions.Throws.ThrowsNothingAssertCondition<TActual>.ThrowsNothingAssertCondition() -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsOfTypeAssertCondition<TActual, TExpectedException>
TUnit.Assertions.AssertConditions.Throws.ThrowsOfTypeAssertCondition<TActual, TExpectedException>.ThrowsOfTypeAssertCondition() -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageAssertCondition<TActual, TException>
TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageAssertCondition<TActual, TException>.ThrowsWithMessageAssertCondition(string! expectedMessage, System.StringComparison stringComparison, System.Func<System.Exception?, System.Exception?>! exceptionSelector) -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageMatchingAssertCondition<TActual, TException>
TUnit.Assertions.AssertConditions.Throws.ThrowsWithMessageMatchingAssertCondition<TActual, TException>.ThrowsWithMessageMatchingAssertCondition(TUnit.Assertions.AssertConditions.StringMatcher! match, System.Func<System.Exception?, System.Exception?>! exceptionSelector) -> void
TUnit.Assertions.AssertConditions.Throws.ThrowsWithParamNameAssertCondition<TActual, TException>
TUnit.Assertions.AssertConditions.Throws.ThrowsWithParamNameAssertCondition<TActual, TException>.ThrowsWithParamNameAssertCondition(string! expectedParamName, System.StringComparison stringComparison, System.Func<System.Exception?, System.ArgumentException?>! exceptionSelector) -> void
TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>
TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.ValueAssertCondition() -> void
TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.WithComparer(System.Func<TActual?, TUnit.Assertions.AssertionDecision!>! comparer) -> void
TUnit.Assertions.AssertConditions.ValueAssertCondition<TActual>.WithTransform(System.Func<TActual?, TActual?>! actualTransformation) -> void
TUnit.Assertions.AssertionBuilders.AndAssertionBuilder
TUnit.Assertions.AssertionBuilders.AndConvertedDelegateAssertionBuilder<TToType>
TUnit.Assertions.AssertionBuilders.AndConvertedDelegateAssertionBuilder<TToType>.AndConvertedDelegateAssertionBuilder(TUnit.Assertions.AssertConditions.Interfaces.ISource! source, System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertionData> mappedData) -> void
TUnit.Assertions.AssertionBuilders.AssertionBuilder
TUnit.Assertions.AssertionBuilders.AssertionBuilder.AppendCallerMethod(string?[]! expressions, string! methodName = "") -> void
TUnit.Assertions.AssertionBuilders.AssertionBuilder.AssertionBuilder(System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertionData> assertionDataTask, string! actualExpression, System.Text.StringBuilder! expressionBuilder, System.Collections.Generic.Stack<TUnit.Assertions.AssertConditions.BaseAssertCondition!>! assertions) -> void
TUnit.Assertions.AssertionBuilders.AssertionBuilder.AssertionBuilder(System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertionData> assertionDataTask, string? actualExpression) -> void
TUnit.Assertions.AssertionBuilders.AssertionBuilder.AssertionBuilder(TUnit.Assertions.AssertConditions.Interfaces.ISource! source) -> void
TUnit.Assertions.AssertionBuilders.AssertionBuilder.AwaitedAssertionData -> TUnit.Assertions.AssertionData?
TUnit.Assertions.AssertionBuilders.AssertionBuilder.Equals(object? obj) -> void
TUnit.Assertions.AssertionBuilders.AssertionBuilder.OtherTypeAssertionBuilder -> TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder?
TUnit.Assertions.AssertionBuilders.AssertionBuilder.ReferenceEquals(object! a, object! b) -> void
TUnit.Assertions.AssertionBuilders.AsyncDelegateAssertionBuilder
TUnit.Assertions.AssertionBuilders.AsyncValueDelegateAssertionBuilder<TActual>
TUnit.Assertions.AssertionBuilders.CastableAssertionBuilder<TActual, TExpected>
TUnit.Assertions.AssertionBuilders.CastableAssertionBuilder<TActual, TExpected>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TExpected?>
TUnit.Assertions.AssertionBuilders.ConvertedDelegateAssertionBuilder<TToType>
TUnit.Assertions.AssertionBuilders.ConvertedDelegateAssertionBuilder<TToType>.ConvertedDelegateAssertionBuilder(TUnit.Assertions.AssertConditions.Interfaces.ISource! source, System.Threading.Tasks.ValueTask<TUnit.Assertions.AssertionData> mappedData) -> void
TUnit.Assertions.AssertionBuilders.ConvertedValueAssertionBuilder<TFromType, TToType>
TUnit.Assertions.AssertionBuilders.ConvertedValueAssertionBuilder<TFromType, TToType>.ConvertedValueAssertionBuilder(TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TFromType>! source, TUnit.Assertions.AssertConditions.ConvertToAssertCondition<TFromType, TToType>! convertToAssertCondition) -> void
TUnit.Assertions.AssertionBuilders.DelegateAssertionBuilder
TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroup<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroup<TActual, TAssertionBuilder>.And(System.Func<TAssertionBuilder!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>!>! assert) -> TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroup<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder>.And(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group) -> TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder>.AndAssertionGroupInvoker(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group1, TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group2) -> void
TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TActual?>
TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup
TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.AssertionGroupBuilder<TActual, TAssertionBuilder>.WithAssertion(System.Func<TAssertionBuilder!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>!>! assert) -> TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroup<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionException
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionException.OrAssertionException(System.Collections.Generic.IEnumerable<System.Exception!>! exceptions) -> void
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroup<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroup<TActual, TAssertionBuilder>.Or(System.Func<TAssertionBuilder!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>!>! assert) -> TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroup<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TActual?>
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder>.Or(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group) -> TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder>.OrAssertionGroupInvoker(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group1, TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group2) -> void
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroup<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroup<TActual, TAssertionBuilder>.And(System.Func<TAssertionBuilder!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>!>! assert) -> TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroup<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroup<TActual, TAssertionBuilder>.Or(System.Func<TAssertionBuilder!, TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>!>! assert) -> TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroup<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroupInvoker<TActual, TAssertionBuilder>
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroupInvoker<TActual, TAssertionBuilder>.And(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.AndAssertionGroupInvoker<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroupInvoker<TActual, TAssertionBuilder>.Or(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! otherGroup) -> TUnit.Assertions.AssertionBuilders.Groups.OrAssertionGroupInvoker<TActual, TAssertionBuilder!>!
TUnit.Assertions.AssertionBuilders.Groups.UnknownAssertionGroupInvoker<TActual, TAssertionBuilder>.UnknownAssertionGroupInvoker(TUnit.Assertions.AssertionBuilders.Groups.AssertionGroup<TActual, TAssertionBuilder!>! group) -> void
TUnit.Assertions.AssertionBuilders.IAndAssertionBuilder
TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder
TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter
TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder.GetExpression() -> string?
TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>
TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>.GetAssertionResults() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TUnit.Assertions.AssertConditions.AssertionResult!>!>!
TUnit.Assertions.AssertionBuilders.InvokableAssertionBuilder<TActual>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter
TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder
TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder.And.get -> TUnit.Assertions.AssertConditions.Operators.DelegateAnd<object?>!
TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder.AssertionBuilder.get -> TUnit.Assertions.AssertionBuilders.AssertionBuilder!
TUnit.Assertions.AssertionBuilders.InvokableDelegateAssertionBuilder.Or.get -> TUnit.Assertions.AssertConditions.Operators.DelegateOr<object?>!
TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>.And.get -> TUnit.Assertions.AssertConditions.Operators.ValueAnd<TActual>!
TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>.Because(string! reason) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TActual?>
TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>.InvokableValueAssertionBuilder(TUnit.Assertions.AssertConditions.Interfaces.ISource! source) -> void
TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>.Or.get -> TUnit.Assertions.AssertConditions.Operators.ValueOr<TActual>!
TUnit.Assertions.AssertionBuilders.InvokableValueDelegateAssertionBuilder<TActual>
TUnit.Assertions.AssertionBuilders.InvokableValueDelegateAssertionBuilder<TActual>.And.get -> TUnit.Assertions.AssertConditions.Operators.ValueDelegateAnd<TActual>!
TUnit.Assertions.AssertionBuilders.InvokableValueDelegateAssertionBuilder<TActual>.AssertionBuilder.get -> TUnit.Assertions.AssertionBuilders.AssertionBuilder!
TUnit.Assertions.AssertionBuilders.InvokableValueDelegateAssertionBuilder<TActual>.Or.get -> TUnit.Assertions.AssertConditions.Operators.ValueDelegateOr<TActual>!
TUnit.Assertions.AssertionBuilders.IOrAssertionBuilder
TUnit.Assertions.AssertionBuilders.OrAssertionBuilder
TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<TActual>
TUnit.Assertions.AssertionBuilders.ValueAssertionBuilder<TActual>.ValueAssertionBuilder(TUnit.Assertions.AssertConditions.Interfaces.ISource! source) -> void
TUnit.Assertions.AssertionBuilders.ValueDelegateAssertionBuilder<TActual>
TUnit.Assertions.AssertionBuilders.Wrappers.BetweenAssertionBuilderWrapper<TActual>
TUnit.Assertions.AssertionBuilders.Wrappers.BetweenAssertionBuilderWrapper<TActual>.WithExclusiveBounds() -> TUnit.Assertions.AssertionBuilders.Wrappers.BetweenAssertionBuilderWrapper<TActual>!
TUnit.Assertions.AssertionBuilders.Wrappers.BetweenAssertionBuilderWrapper<TActual>.WithInclusiveBounds() -> TUnit.Assertions.AssertionBuilders.Wrappers.BetweenAssertionBuilderWrapper<TActual>!
TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeEqualToAssertionBuilderWrapper
TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeEqualToAssertionBuilderWrapper.Within(System.TimeSpan tolerance, string! doNotPopulateThis = "") -> TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeEqualToAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeOffsetEqualToAssertionBuilderWrapper
TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeOffsetEqualToAssertionBuilderWrapper.Within(System.TimeSpan tolerance, string! doNotPopulateThis = "") -> TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeOffsetEqualToAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.EquivalentToAssertionBuilderWrapper<TActual, TExpected>
TUnit.Assertions.AssertionBuilders.Wrappers.EquivalentToAssertionBuilderWrapper<TActual, TExpected>.IgnoringMember(string! propertyName, string! doNotPopulateThis = "") -> TUnit.Assertions.AssertionBuilders.Wrappers.EquivalentToAssertionBuilderWrapper<TActual, TExpected>!
TUnit.Assertions.AssertionBuilders.Wrappers.EquivalentToAssertionBuilderWrapper<TActual, TExpected>.WithPartialEquivalency() -> TUnit.Assertions.AssertionBuilders.Wrappers.EquivalentToAssertionBuilderWrapper<TActual, TExpected>!
TUnit.Assertions.AssertionBuilders.Wrappers.GenericEqualToAssertionBuilderWrapper<TActual>
TUnit.Assertions.AssertionBuilders.Wrappers.GenericNotEqualToAssertionBuilderWrapper<TActual>
TUnit.Assertions.AssertionBuilders.Wrappers.NotBetweenAssertionBuilderWrapper<TActual>
TUnit.Assertions.AssertionBuilders.Wrappers.NotBetweenAssertionBuilderWrapper<TActual>.WithExclusiveBounds() -> TUnit.Assertions.AssertionBuilders.Wrappers.NotBetweenAssertionBuilderWrapper<TActual>!
TUnit.Assertions.AssertionBuilders.Wrappers.NotBetweenAssertionBuilderWrapper<TActual>.WithInclusiveBounds() -> TUnit.Assertions.AssertionBuilders.Wrappers.NotBetweenAssertionBuilderWrapper<TActual>!
TUnit.Assertions.AssertionBuilders.Wrappers.SingleItemAssertionBuilderWrapper<TActual, TInner>
TUnit.Assertions.AssertionBuilders.Wrappers.SingleItemAssertionBuilderWrapper<TActual, TInner>.GetAwaiter() -> System.Runtime.CompilerServices.TaskAwaiter<TInner?>
TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper
TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper.IgnoringWhitespace() -> TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper.WithTrimming() -> TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper
TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper.IgnoringWhitespace() -> TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper.WithNullAndEmptyEquality() -> TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper.WithTrimming() -> TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper!
TUnit.Assertions.AssertionBuilders.Wrappers.TimeSpanEqualToAssertionBuilderWrapper
TUnit.Assertions.AssertionBuilders.Wrappers.TimeSpanEqualToAssertionBuilderWrapper.Within(System.TimeSpan tolerance, string! doNotPopulateThis = "") -> TUnit.Assertions.AssertionBuilders.Wrappers.TimeSpanEqualToAssertionBuilderWrapper!
TUnit.Assertions.AssertionData
TUnit.Assertions.AssertionData.ActualExpression.get -> string?
TUnit.Assertions.AssertionData.ActualExpression.init -> void
TUnit.Assertions.AssertionData.AssertionData() -> void
TUnit.Assertions.AssertionData.AssertionData(object? Result, System.Exception? Exception, string? ActualExpression, System.DateTimeOffset Start, System.DateTimeOffset End) -> void
TUnit.Assertions.AssertionData.End.get -> System.DateTimeOffset
TUnit.Assertions.AssertionData.End.init -> void
TUnit.Assertions.AssertionData.Exception.get -> System.Exception?
TUnit.Assertions.AssertionData.Exception.init -> void
TUnit.Assertions.AssertionData.Result.get -> object?
TUnit.Assertions.AssertionData.Result.init -> void
TUnit.Assertions.AssertionData.Start.get -> System.DateTimeOffset
TUnit.Assertions.AssertionData.Start.init -> void
TUnit.Assertions.AssertionDecision
TUnit.Assertions.AssertionMetadata
TUnit.Assertions.AssertionMetadata.AssertionMetadata() -> void
TUnit.Assertions.AssertionMetadata.Duration.get -> System.TimeSpan
TUnit.Assertions.AssertionMetadata.EndTime.get -> System.DateTimeOffset
TUnit.Assertions.AssertionMetadata.EndTime.init -> void
TUnit.Assertions.AssertionMetadata.StartTime.get -> System.DateTimeOffset
TUnit.Assertions.AssertionMetadata.StartTime.init -> void
TUnit.Assertions.Assertions.Delegates.CompleteWithinAssertCondition<TActual>
TUnit.Assertions.Assertions.Delegates.CompleteWithinAssertCondition<TActual>.CompleteWithinAssertCondition(System.TimeSpan timeSpan) -> void
TUnit.Assertions.Assertions.Delegates.DelegateExtensions
TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveFlagAssertCondition<TEnum>
TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveFlagAssertCondition<TEnum>.EnumDoesNotHaveFlagAssertCondition(TEnum expected) -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameNameAsCondition<TEnum, TExpected>
TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameNameAsCondition<TEnum, TExpected>.EnumDoesNotHaveSameNameAsCondition(TExpected expected) -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameValueAsCondition<TEnum, TExpected>
TUnit.Assertions.Assertions.Enums.Conditions.EnumDoesNotHaveSameValueAsCondition<TEnum, TExpected>.EnumDoesNotHaveSameValueAsCondition(TExpected expected) -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumHasFlagAssertCondition<TEnum>
TUnit.Assertions.Assertions.Enums.Conditions.EnumHasFlagAssertCondition<TEnum>.EnumHasFlagAssertCondition(TEnum expected) -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameNameAsCondition<TEnum, TExpected>
TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameNameAsCondition<TEnum, TExpected>.EnumHasSameNameAsCondition(TExpected expected) -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameValueAsCondition<TEnum, TExpected>
TUnit.Assertions.Assertions.Enums.Conditions.EnumHasSameValueAsCondition<TEnum, TExpected>.EnumHasSameValueAsCondition(TExpected expected) -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumIsDefinedAssertCondition<TEnum>
TUnit.Assertions.Assertions.Enums.Conditions.EnumIsDefinedAssertCondition<TEnum>.EnumIsDefinedAssertCondition() -> void
TUnit.Assertions.Assertions.Enums.Conditions.EnumIsNotDefinedAssertCondition<TEnum>
TUnit.Assertions.Assertions.Enums.Conditions.EnumIsNotDefinedAssertCondition<TEnum>.EnumIsNotDefinedAssertCondition() -> void
TUnit.Assertions.Assertions.Enums.EnumHasExtensions
TUnit.Assertions.Assertions.Generics.Conditions.AssignableFromExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.AssignableFromExpectedValueAssertCondition<TActual>.AssignableFromExpectedValueAssertCondition(System.Type! expectedType) -> void
TUnit.Assertions.Assertions.Generics.Conditions.AssignableToExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.AssignableToExpectedValueAssertCondition<TActual>.AssignableToExpectedValueAssertCondition(System.Type! expectedType) -> void
TUnit.Assertions.Assertions.Generics.Conditions.DefaultExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.DefaultExpectedValueAssertCondition<TActual>.DefaultExpectedValueAssertCondition() -> void
TUnit.Assertions.Assertions.Generics.Conditions.EqualsExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.EqualsExpectedValueAssertCondition<TActual>.EqualsExpectedValueAssertCondition(TActual expected) -> void
TUnit.Assertions.Assertions.Generics.Conditions.EqualsExpectedValueAssertCondition<TActual>.EqualsExpectedValueAssertCondition(TActual expected, System.Collections.Generic.IEqualityComparer<TActual>! equalityComparer) -> void
TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>
TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>.EquivalencyKind.get -> TUnit.Assertions.Enums.EquivalencyKind
TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>.EquivalencyKind.set -> void
TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>.EquivalentToExpectedValueAssertCondition(TExpected expected, string? expectedExpression) -> void
TUnit.Assertions.Assertions.Generics.Conditions.EquivalentToExpectedValueAssertCondition<TActual, TExpected>.IgnoringMember(string! fieldName) -> void
TUnit.Assertions.Assertions.Generics.Conditions.NoOpAssertionCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.NoOpAssertionCondition<TActual>.NoOpAssertionCondition() -> void
TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableFromExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableFromExpectedValueAssertCondition<TActual>.NotAssignableFromExpectedValueAssertCondition(System.Type! expectedType) -> void
TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableToExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.NotAssignableToExpectedValueAssertCondition<TActual>.NotAssignableToExpectedValueAssertCondition(System.Type! expectedType) -> void
TUnit.Assertions.Assertions.Generics.Conditions.NotDefaultExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.NotDefaultExpectedValueAssertCondition<TActual>.NotDefaultExpectedValueAssertCondition() -> void
TUnit.Assertions.Assertions.Generics.Conditions.NotEqualsExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.NotEqualsExpectedValueAssertCondition<TActual>.NotEqualsExpectedValueAssertCondition(TActual expected) -> void
TUnit.Assertions.Assertions.Generics.Conditions.NotSameReferenceExpectedValueAssertCondition<TActual, TExpected>
TUnit.Assertions.Assertions.Generics.Conditions.NotSameReferenceExpectedValueAssertCondition<TActual, TExpected>.NotSameReferenceExpectedValueAssertCondition(TExpected expected) -> void
TUnit.Assertions.Assertions.Generics.Conditions.NotTypeOfExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.NotTypeOfExpectedValueAssertCondition<TActual>.NotTypeOfExpectedValueAssertCondition(System.Type! expected) -> void
TUnit.Assertions.Assertions.Generics.Conditions.SameReferenceExpectedValueAssertCondition<TActual, TExpected>
TUnit.Assertions.Assertions.Generics.Conditions.SameReferenceExpectedValueAssertCondition<TActual, TExpected>.SameReferenceExpectedValueAssertCondition(TExpected expected) -> void
TUnit.Assertions.Assertions.Generics.Conditions.TypeOfExpectedValueAssertCondition<TActual>
TUnit.Assertions.Assertions.Generics.Conditions.TypeOfExpectedValueAssertCondition<TActual>.TypeOfExpectedValueAssertCondition(System.Type! expectedType) -> void
TUnit.Assertions.Assertions.Strings.Conditions.StringContainsExpectedValueAssertCondition
TUnit.Assertions.Assertions.Strings.Conditions.StringContainsExpectedValueAssertCondition.StringContainsExpectedValueAssertCondition(string! expected, System.StringComparison stringComparison) -> void
TUnit.Assertions.Assertions.Throws.ThrowsWithinAssertCondition<TActual, TExpectedException>
TUnit.Assertions.Assertions.Throws.ThrowsWithinAssertCondition<TActual, TExpectedException>.ThrowsWithinAssertCondition(System.TimeSpan timeSpan) -> void
TUnit.Assertions.CollectionWrapper<TInner>
TUnit.Assertions.CollectionWrapper<TInner>.CollectionWrapper(TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>!>! valueSource) -> void
TUnit.Assertions.CollectionWrapper<TInner>.Satisfy(System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TInner?>!, TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder!>! assert, string! assertionBuilderExpression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>!>!
TUnit.Assertions.CollectionWrapper<TInner>.Satisfy<TExpected>(System.Func<TInner?, System.Threading.Tasks.Task<TExpected>?>! asyncMapper, System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TExpected?>!, TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder!>! assert, string! mapperExpression = "", string! assertionBuilderExpression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>!>!
TUnit.Assertions.CollectionWrapper<TInner>.Satisfy<TExpected>(System.Func<TInner?, TExpected>! mapper, System.Func<TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TExpected?>!, TUnit.Assertions.AssertionBuilders.IInvokableAssertionBuilder!>! assert, string! mapperExpression = "", string! assertionBuilderExpression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>!>!
TUnit.Assertions.Compare
TUnit.Assertions.CompareOptions
TUnit.Assertions.CompareOptions.EquivalencyKind.get -> TUnit.Assertions.Enums.EquivalencyKind
TUnit.Assertions.CompareOptions.EquivalencyKind.set -> void
TUnit.Assertions.CompareOptions.MembersToIgnore.get -> string![]!
TUnit.Assertions.CompareOptions.MembersToIgnore.init -> void
TUnit.Assertions.ComparisonFailure
TUnit.Assertions.ComparisonFailure.Actual.get -> object?
TUnit.Assertions.ComparisonFailure.Actual.init -> void
TUnit.Assertions.ComparisonFailure.Expected.get -> object?
TUnit.Assertions.ComparisonFailure.Expected.init -> void
TUnit.Assertions.ComparisonFailure.NestedMemberNames.get -> string![]!
TUnit.Assertions.ComparisonFailure.NestedMemberNames.init -> void
TUnit.Assertions.ComparisonFailure.Type.get -> TUnit.Assertions.MemberType
TUnit.Assertions.ComparisonFailure.Type.init -> void
TUnit.Assertions.Enums.CollectionOrdering
TUnit.Assertions.Enums.CollectionOrdering.Any = 1 -> TUnit.Assertions.Enums.CollectionOrdering
TUnit.Assertions.Enums.CollectionOrdering.Matching = 0 -> TUnit.Assertions.Enums.CollectionOrdering
TUnit.Assertions.Enums.EquivalencyKind
TUnit.Assertions.Enums.EquivalencyKind.Full = 0 -> TUnit.Assertions.Enums.EquivalencyKind
TUnit.Assertions.Enums.EquivalencyKind.Partial = 1 -> TUnit.Assertions.Enums.EquivalencyKind
TUnit.Assertions.Enums.Order
TUnit.Assertions.Enums.Order.Ascending = 0 -> TUnit.Assertions.Enums.Order
TUnit.Assertions.Enums.Order.Descending = 1 -> TUnit.Assertions.Enums.Order
TUnit.Assertions.Equality.CollectionEquivalentToEqualityComparer<T>
TUnit.Assertions.Equality.CollectionEquivalentToEqualityComparer<T>.CollectionEquivalentToEqualityComparer() -> void
TUnit.Assertions.Equality.CollectionEquivalentToEqualityComparer<T>.CollectionEquivalentToEqualityComparer(TUnit.Assertions.CompareOptions! compareOptions) -> void
TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>
TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.ComparisonFailures.get -> TUnit.Assertions.ComparisonFailure![]?
TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.EquivalentToEqualityComparer() -> void
TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.EquivalentToEqualityComparer(TUnit.Assertions.CompareOptions! compareOptions) -> void
TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.GetFailureMessages() -> string!
TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.GetHashCode(T obj) -> int
TUnit.Assertions.Exceptions.AssertionException
TUnit.Assertions.Exceptions.AssertionException.AssertionException(string? message) -> void
TUnit.Assertions.Exceptions.AssertionException.AssertionException(string? message, System.Exception! innerException) -> void
TUnit.Assertions.Exceptions.BaseAssertionException
TUnit.Assertions.Exceptions.BaseAssertionException.BaseAssertionException() -> void
TUnit.Assertions.Exceptions.BaseAssertionException.BaseAssertionException(string? message) -> void
TUnit.Assertions.Exceptions.BaseAssertionException.BaseAssertionException(string? message, System.Exception? innerException) -> void
TUnit.Assertions.Exceptions.MaybeCaughtException
TUnit.Assertions.Exceptions.MaybeCaughtException.MaybeCaughtException(System.Exception! exception) -> void
TUnit.Assertions.Exceptions.MixedAndOrAssertionsException
TUnit.Assertions.Exceptions.MixedAndOrAssertionsException.MixedAndOrAssertionsException() -> void
TUnit.Assertions.Extensions.BooleanIsExtensions
TUnit.Assertions.Extensions.BooleanIsNotExtensions
TUnit.Assertions.Extensions.CharIsExtensions
TUnit.Assertions.Extensions.CharIsNotExtensions
TUnit.Assertions.Extensions.CollectionsIsExtensions
TUnit.Assertions.Extensions.CollectionsIsNotExtensions
TUnit.Assertions.Extensions.ComparableIsExtensions
TUnit.Assertions.Extensions.ComparableIsNotExtensions
TUnit.Assertions.Extensions.DateTimeIsExtensions
TUnit.Assertions.Extensions.DateTimeOffsetIsExtensions
TUnit.Assertions.Extensions.DoesExtensions
TUnit.Assertions.Extensions.DoesNotExtensions
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.Empty.get -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.EnumerableCount(TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual>! valueSource) -> void
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.EqualTo(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.EqualToOne() -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.EqualToZero() -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.GreaterThan(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.GreaterThanOrEqualTo(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.LessThan(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.LessThanOrEqualTo(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.Negative() -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.EnumerableCount<TActual, TInner>.Positive() -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>!
TUnit.Assertions.Extensions.GenericIsExtensions
TUnit.Assertions.Extensions.GenericIsNotExtensions
TUnit.Assertions.Extensions.GenericSatisfiesExtensions
TUnit.Assertions.Extensions.HasExtensions
TUnit.Assertions.Extensions.ImmutableArrayIsExtensions
TUnit.Assertions.Extensions.ImmutableArrayIsNotExtensions
TUnit.Assertions.Extensions.SourceExtensions
TUnit.Assertions.Extensions.StringExtensions
TUnit.Assertions.Extensions.StringIsExtensions
TUnit.Assertions.Extensions.StringIsNotExtensions
TUnit.Assertions.Extensions.StringLength
TUnit.Assertions.Extensions.StringLength.EqualTo(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.StringLength.GreaterThan(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.StringLength.GreaterThanOrEqualTo(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.StringLength.LessThan(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.StringLength.LessThanOrEqualTo(int expected, string? doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.StringLength.Positive.get -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.StringLength.StringLength(TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string!>! valueSource) -> void
TUnit.Assertions.Extensions.StringLength.Zero.get -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string!>!
TUnit.Assertions.Extensions.TimeSpanExtensions
TUnit.Assertions.Extensions.TimeSpanIsExtensions
TUnit.Assertions.Extensions.TimeSpanIsNotExtensions
TUnit.Assertions.Fail
TUnit.Assertions.Helpers.ExpressionHelpers
TUnit.Assertions.Helpers.Formatter
TUnit.Assertions.Helpers.Formatter.Formatter() -> void
TUnit.Assertions.Helpers.StringDifference
TUnit.Assertions.Helpers.StringDifference.IgnoreWhiteSpace.get -> int
TUnit.Assertions.Helpers.StringDifference.IgnoreWhiteSpace.set -> void
TUnit.Assertions.Helpers.StringDifference.IndexOfFirstMismatch() -> int
TUnit.Assertions.Helpers.StringDifference.OverriddenIndex.get -> int?
TUnit.Assertions.Helpers.StringDifference.OverriddenIndex.set -> void
TUnit.Assertions.Helpers.StringDifference.StringDifference(string? actualValue, string? expectedValue, System.Collections.Generic.IEqualityComparer<string!>? comparer = null) -> void
TUnit.Assertions.Helpers.StringDifference.ToString(string! prefix) -> string!
TUnit.Assertions.Helpers.TimeSpanFormatter
TUnit.Assertions.MemberType
TUnit.Assertions.MemberType.EnumerableItem = 3 -> TUnit.Assertions.MemberType
TUnit.Assertions.MemberType.Field = 1 -> TUnit.Assertions.MemberType
TUnit.Assertions.MemberType.Property = 0 -> TUnit.Assertions.MemberType
TUnit.Assertions.MemberType.Value = 2 -> TUnit.Assertions.MemberType
virtual TUnit.Assertions.AssertConditions.BaseAssertCondition.WaitFor.get -> System.TimeSpan?
virtual TUnit.Assertions.AssertConditions.BaseAssertCondition.WaitFor.set -> void
virtual TUnit.Assertions.AssertConditions.DelegateAssertCondition<TActual, TException>.GetFailureMessage(TException? exception) -> string!
virtual TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.EnumerableIndex.get -> int?
virtual TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.EnumerableIndex.set -> void
virtual TUnit.Assertions.Equality.EquivalentToEqualityComparer<T>.Equals(T? x, T? y) -> bool
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool> valueSource, bool expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool>
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource, bool expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource, bool? expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsFalse(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool>
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsFalse(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsTrue(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool>
~static TUnit.Assertions.Extensions.BooleanIsExtensions.IsTrue(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool> valueSource, bool expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource, bool expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource, bool? expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotFalse(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotFalse(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotTrue(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool>
~static TUnit.Assertions.Extensions.BooleanIsNotExtensions.IsNotTrue(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<bool?> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<bool?>
~static TUnit.Assertions.Extensions.CharIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<char> valueSource, char expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<char>
~static TUnit.Assertions.Extensions.CharIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<char?> valueSource, char expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<char?>
~static TUnit.Assertions.Extensions.CharIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<char?> valueSource, char? expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<char?>
~static TUnit.Assertions.Extensions.CharIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<char> valueSource, char expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<char>
~static TUnit.Assertions.Extensions.CharIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<char?> valueSource, char expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<char?>
~static TUnit.Assertions.Extensions.CharIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<char?> valueSource, char? expected) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<char?>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsEmpty<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsEquivalentTo<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, System.Collections.Generic.IEnumerable<TInner> expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsEquivalentTo<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, System.Collections.Generic.IEnumerable<TInner> expected, System.Collections.Generic.IEqualityComparer<TInner> comparer, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsEquivalentTo<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, System.Collections.Generic.IEnumerable<TInner> expected, System.Collections.Generic.IEqualityComparer<TInner> comparer, TUnit.Assertions.Enums.CollectionOrdering collectionOrdering, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsEquivalentTo<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, System.Collections.Generic.IEnumerable<TInner> expected, TUnit.Assertions.Enums.CollectionOrdering collectionOrdering, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsInDescendingOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsInDescendingOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Collections.Generic.IComparer<TInner> comparer) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsInOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsInOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Collections.Generic.IComparer<TInner> comparer) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsOrderedBy<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsOrderedBy<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, System.Collections.Generic.IComparer<TComparisonItem> comparer, string doNotPopulateThisValue = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsOrderedByDescending<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsExtensions.IsOrderedByDescending<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, System.Collections.Generic.IComparer<TComparisonItem> comparer, string doNotPopulateThisValue = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsNotExtensions.IsNotEmpty<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.CollectionsIsNotExtensions.IsNotEquivalentTo<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, System.Collections.Generic.IEnumerable<TInner> expected, System.Collections.Generic.IEqualityComparer<TInner> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsExtensions.IsBetween<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual lowerBound, TActual upperBound, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.BetweenAssertionBuilderWrapper<TActual>
~static TUnit.Assertions.Extensions.ComparableIsExtensions.IsGreaterThan<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsExtensions.IsGreaterThanOrEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsExtensions.IsLessThan<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsExtensions.IsLessThanOrEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsNotExtensions.IsNotBetween<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual lowerBound, TActual upperBound, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.NotBetweenAssertionBuilderWrapper<TActual>
~static TUnit.Assertions.Extensions.ComparableIsNotExtensions.IsNotGreaterThan<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsNotExtensions.IsNotGreaterThanOrEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsNotExtensions.IsNotLessThan<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.ComparableIsNotExtensions.IsNotLessThanOrEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.DateTimeIsExtensions.IsAfter(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTime> valueSource, System.DateTime expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTime>
~static TUnit.Assertions.Extensions.DateTimeIsExtensions.IsAfterOrEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTime> valueSource, System.DateTime expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTime>
~static TUnit.Assertions.Extensions.DateTimeIsExtensions.IsBefore(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTime> valueSource, System.DateTime expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTime>
~static TUnit.Assertions.Extensions.DateTimeIsExtensions.IsBeforeOrEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTime> valueSource, System.DateTime expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTime>
~static TUnit.Assertions.Extensions.DateTimeIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTime> valueSource, System.DateTime expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeEqualToAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.DateTimeOffsetIsExtensions.IsAfter(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTimeOffset> valueSource, System.DateTimeOffset expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTimeOffset>
~static TUnit.Assertions.Extensions.DateTimeOffsetIsExtensions.IsAfterOrEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTimeOffset> valueSource, System.DateTimeOffset expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTimeOffset>
~static TUnit.Assertions.Extensions.DateTimeOffsetIsExtensions.IsBefore(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTimeOffset> valueSource, System.DateTimeOffset expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTimeOffset>
~static TUnit.Assertions.Extensions.DateTimeOffsetIsExtensions.IsBeforeOrEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTimeOffset> valueSource, System.DateTimeOffset expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.DateTimeOffset>
~static TUnit.Assertions.Extensions.DateTimeOffsetIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.DateTimeOffset> valueSource, System.DateTimeOffset expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.DateTimeOffsetEqualToAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.DoesExtensions.Contains(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.DoesExtensions.Contains(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.StringContainsAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.DoesExtensions.Contains<TActual, TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TInner expected, System.Collections.Generic.IEqualityComparer<TInner> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.DoesExtensions.Contains<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Func<TInner, bool> matcher, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.DoesExtensions.ContainsKey<TDictionary, TKey>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TDictionary> valueSource, TKey expected, System.Collections.Generic.IEqualityComparer<TKey> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TDictionary>
~static TUnit.Assertions.Extensions.DoesExtensions.ContainsOnly<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Func<TInner, bool> matcher, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.DoesExtensions.ContainsValue<TDictionary, TValue>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TDictionary> valueSource, TValue expected, System.Collections.Generic.IEqualityComparer<TValue> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TDictionary>
~static TUnit.Assertions.Extensions.DoesExtensions.EndsWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesExtensions.EndsWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesExtensions.Matches(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string regex, string expression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesExtensions.Matches(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, System.Text.RegularExpressions.Regex regex, string expression = "") -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesExtensions.StartsWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesExtensions.StartsWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotContain(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotContain(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotContainKey<TDictionary, TKey>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TDictionary> valueSource, TKey expected, System.Collections.Generic.IEqualityComparer<TKey> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TDictionary>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotContainValue<TDictionary, TValue>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TDictionary> valueSource, TValue expected, System.Collections.Generic.IEqualityComparer<TValue> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TDictionary>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotEndWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotEndWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotStartWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.DoesNotExtensions.DoesNotStartWith(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsAssignableFrom(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource, System.Type type) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsAssignableFrom<TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsAssignableTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource, System.Type type) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsAssignableTo<TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource) -> TUnit.Assertions.AssertionBuilders.CastableAssertionBuilder<object, TExpected>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.GenericEqualToAssertionBuilderWrapper<TActual>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, System.Collections.Generic.IEqualityComparer<TActual> equalityComparer, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.GenericEqualToAssertionBuilderWrapper<TActual>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsEquatableOrEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsEquivalentTo<TActual, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TExpected expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.EquivalentToAssertionBuilderWrapper<TActual, TExpected>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNotAssignableFrom(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource, System.Type type) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNotAssignableFrom<TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNotAssignableTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource, System.Type type) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNotAssignableTo<TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNotTypeOf(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource, System.Type type) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNotTypeOf<TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsNull<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsSameReferenceAs<TActual, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TExpected expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsTypeOf(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource, System.Type type) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<object>
~static TUnit.Assertions.Extensions.GenericIsExtensions.IsTypeOf<TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<object> valueSource) -> TUnit.Assertions.AssertionBuilders.CastableAssertionBuilder<object, TExpected>
~static TUnit.Assertions.Extensions.GenericIsNotExtensions.IsDefault<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsNotExtensions.IsNotDefault<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsNotExtensions.IsNotEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.GenericNotEqualToAssertionBuilderWrapper<TActual>
~static TUnit.Assertions.Extensions.GenericIsNotExtensions.IsNotEquatableOrEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TActual expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsNotExtensions.IsNotNull<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.GenericIsNotExtensions.IsNotSameReferenceAs<TActual, TExpected>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TExpected expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasCount<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.Extensions.EnumerableCount<System.Collections.Generic.IEnumerable<TInner>, TInner>
~static TUnit.Assertions.Extensions.HasExtensions.HasCount<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.Extensions.EnumerableCount<System.Collections.Immutable.ImmutableArray<TInner>, TInner>
~static TUnit.Assertions.Extensions.HasExtensions.HasDistinctItems<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.HasExtensions.HasDistinctItems<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource, System.Collections.Generic.IEqualityComparer<TInner> equalityComparer) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Generic.IEnumerable<TInner>>
~static TUnit.Assertions.Extensions.HasExtensions.HasDistinctItems<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.HasExtensions.HasDistinctItems<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Generic.IEqualityComparer<TInner> equalityComparer) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.HasExtensions.HasLength(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.Extensions.StringLength
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageContaining<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageContaining<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageEndingWith<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageEndingWith<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageEqualTo<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageMatching<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, TUnit.Assertions.AssertConditions.StringMatcher expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageStartingWith<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasMessageStartingWith<TActual>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<TActual> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<TActual>
~static TUnit.Assertions.Extensions.HasExtensions.HasSingleItem<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Generic.IEnumerable<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.Wrappers.SingleItemAssertionBuilderWrapper<System.Collections.Generic.IEnumerable<TInner>, TInner>
~static TUnit.Assertions.Extensions.HasExtensions.HasSingleItem<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.Wrappers.SingleItemAssertionBuilderWrapper<System.Collections.Immutable.ImmutableArray<TInner>, TInner>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsEmpty<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsEquivalentTo<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Immutable.ImmutableArray<TInner> expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsEquivalentTo<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Immutable.ImmutableArray<TInner> expected, System.Collections.Generic.IEqualityComparer<TInner> comparer, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsEquivalentTo<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Immutable.ImmutableArray<TInner> expected, System.Collections.Generic.IEqualityComparer<TInner> comparer, TUnit.Assertions.Enums.CollectionOrdering collectionOrdering, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsEquivalentTo<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Immutable.ImmutableArray<TInner> expected, TUnit.Assertions.Enums.CollectionOrdering collectionOrdering, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsInDescendingOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsInDescendingOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Generic.IComparer<TInner> comparer) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsInOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsInOrder<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Generic.IComparer<TInner> comparer) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsOrderedBy<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsOrderedBy<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, System.Collections.Generic.IComparer<TComparisonItem> comparer, string doNotPopulateThisValue = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsOrderedByDescending<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsExtensions.IsOrderedByDescending<TInner, TComparisonItem>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Func<TInner, TComparisonItem> comparisonItemSelector, System.Collections.Generic.IComparer<TComparisonItem> comparer, string doNotPopulateThisValue = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsNotExtensions.IsNotEmpty<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.ImmutableArrayIsNotExtensions.IsNotEquivalentTo<TInner>(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.Collections.Immutable.ImmutableArray<TInner>> valueSource, System.Collections.Generic.IEnumerable<TInner> expected, System.Collections.Generic.IEqualityComparer<TInner> equalityComparer = null, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.Collections.Immutable.ImmutableArray<TInner>>
~static TUnit.Assertions.Extensions.StringIsExtensions.IsEmpty(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.StringIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.StringEqualToAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.StringIsExtensions.IsNullOrEmpty(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsExtensions.IsNullOrWhitespace(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsNotExtensions.IsNotEmpty(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, string doNotPopulateThisValue = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsNotExtensions.IsNotEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource, string expected, System.StringComparison stringComparison, string doNotPopulateThisValue1 = null, string doNotPopulateThisValue2 = null) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsNotExtensions.IsNotNullOrEmpty(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.StringIsNotExtensions.IsNotNullOrWhitespace(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<string> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<string>
~static TUnit.Assertions.Extensions.TimeSpanIsExtensions.IsEqualTo(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.TimeSpan> valueSource, System.TimeSpan expected, string doNotPopulateThisValue1 = null) -> TUnit.Assertions.AssertionBuilders.Wrappers.TimeSpanEqualToAssertionBuilderWrapper
~static TUnit.Assertions.Extensions.TimeSpanIsExtensions.IsZero(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.TimeSpan> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.TimeSpan>
~static TUnit.Assertions.Extensions.TimeSpanIsNotExtensions.IsNotZero(this TUnit.Assertions.AssertConditions.Interfaces.IValueSource<System.TimeSpan> valueSource) -> TUnit.Assertions.AssertionBuilders.InvokableValueAssertionBuilder<System.TimeSpan>